<style id="w3_bg_load">div:not(.bgImg), section:not(.bgImg), iframelazy:not(.bgimg){background-image:none !important;}</style>
<script>    
    var w3LazyloadByPx=200, 
        blankImageWebpUrl = "{{ '1x1-transaprent.webp' | asset_url }}",             
        w3LazyloadJs = 1,       
        w3Inp = 1,
        w3ExcludedJs=0;
	var w3pageshow = ""; !function () { var t = EventTarget.prototype.addEventListener; let e = [], n = []; function i(t) { n.click.push(t.target) } function s(t, i) { i > 3 || n[t].forEach((function (a) { var r = 0; if (e[t].forEach((function (t) { o(t, a) && (r = 1) })), !window.w3Html.eventEcr.includes(a) && !r && void 0 !== a.click) return window.w3Html.eventEcr.push(a), a.click(); window.w3Html.eventEcr.includes(a) || r || void 0 !== a.click || ["HTML", "BODY"].includes(a.parentNode.tagName) || (n[t] = [], n[t].push(a.parentNode), s(t, i++)) })) } function o(t, e) { return t == e || "string" == typeof e.tagName && !["HTML", "BODY"].includes(e.tagName) && o(t, e.parentNode) } e.click = [], n.click = [], n.touchstart = [], window.w3Html = [], window.w3Html.eventEcr = [], window.w3Html.class = "", window.w3Html["css-preloaded"] = 0, window.w3Html["data-css"] = 0, window.w3Html["data-css-loaded"] = 0, "onpageshow" in window && (window.onpageshow = function (t) { w3pageshow = t }), EventTarget.prototype.addEventListener = function (n, i, s) { ["click", "touchstart", "keydown", "keyup", "input", "blur", "focus", "pointerup", "pointerdown"].includes(n) && (-1 == window.w3Html.class.indexOf("w3_start") && ["click", "touchstart"].includes(n) && e.click.push(this), w3Inp && ["keydown", "keyup", "input", "blur", "focus", "pointerup", "pointerdown"].includes(n) && -1 == i.toString().indexOf("preventDefault") && -1 == i.toString().indexOf("stopPropagation(") && -1 == i.toString().indexOf("event.dispatch.apply") && ("object" != typeof s || "object" == typeof s && "boolean" != typeof s.passive) && ((s = "object" == typeof s ? s : []).passive = !0)), w3Inp && -1 != window.location.href.indexOf("?test-inp=") && console.log("rocket", this, n, i, s), t.call(this, n, i, s) }, document.querySelector("html").addEventListener("click", i, { passive: !0 }), window.addEventListener("w3-load", (function t() { return -1 != window.w3Html.class.indexOf("jsload") ? (document.querySelector("html").removeEventListener("click", i), setTimeout((function () { s("click", 0) }), 100)) : setTimeout((function () { t() }), 50) }), { passive: !0 }) }(); class w3LoadScripts { constructor(t) { this.triggerEvents = t, this.eventOptions = { passive: !0 }, this.userEventListener = this.triggerListener.bind(this), this.lazyTrigger, this.styleLoadFired, this.lazyScriptsLoadFired = 0, this.scriptsLoadFired = 0, this.excluded_js = w3ExcludedJs, this.w3LazyloadJs = w3LazyloadJs, this.w3_fonts = "undefined" != typeof w3GoogleFont ? w3GoogleFont : [], this.w3Styles = [], this.w3Scripts = { normal: [], async: [], defer: [], lazy: [] }, this.allJQueries = [] } userEventsAdd(t) { this.triggerEvents.forEach((e => window.addEventListener(e, t.userEventListener, t.eventOptions))) } userEventsRemove(t) { this.triggerEvents.forEach((e => window.removeEventListener(e, t.userEventListener, t.eventOptions))) } async triggerListener() { return await this.repaintFrame(), "function" == typeof requestIdleCallback ? this.idleCallback() : this.setTimeoutCallEvents() } idleCallback() { return requestIdleCallback((t => { this.callEvents() }), { timeout: 50 }) } setTimeoutCallEvents() { return setTimeout((function (t) { t.callEvents() }), 150, this) } callEvents() { this.userEventsRemove(this), this.lazyScriptsLoadFired = 1, this.addHtmlClass("w3_user"), "loading" === document.readyState ? (document.addEventListener("DOMContentLoaded", this.loadStyleResources.bind(this)), !this.scriptsLoadFire && document.addEventListener("DOMContentLoaded", this.loadResources.bind(this))) : (this.loadStyleResources(), !this.scriptsLoadFire && this.loadResources()) } async loadStyleResources() { this.styleLoadFired || (this.styleLoadFired = !0, this.registerStyles(), window.w3Html["data-css"] = this.w3Styles.length, this.preloadScripts(this.w3Styles), this.loadStylesPreloaded(), this.loadFonts(this.w3_fonts)) } async loadStylesPreloaded() { setTimeout((function (t) { 1 == window.w3Html["css-preloaded"] ? t.loadStyles(t.w3Styles) : t.loadStylesPreloaded() }), 200, this) } async loadResources() { this.scriptsLoadFired || (this.scriptsLoadFired = !0, this.holdEventListeners(), this.exeDocumentWrite(), this.registerScripts(), this.addHtmlClass("w3_start"), "function" == typeof w3EventsOnStartJs && w3EventsOnStartJs(), this.preloadScripts(this.w3Scripts.normal), this.preloadScripts(this.w3Scripts.defer), this.preloadScripts(this.w3Scripts.async), this.w3Analytics(), this.w3Boomerang(), await this.loadScripts(this.w3Scripts.normal), await this.loadScripts(this.w3Scripts.defer), await this.loadScripts(this.w3Scripts.async), await this.executeDomcontentloaded(), await this.executeWindowLoad(), window.dispatchEvent(new Event("w3-scripts-loaded")), this.addHtmlClass("w3_js"), "function" == typeof w3EventsOnEndJs && w3EventsOnEndJs(), this.lazyTrigger = setInterval(this.w3TriggerLazyScript, 500, this)) } async w3TriggerLazyScript(t) { t.lazyScriptsLoadFired && (await t.loadScripts(t.w3Scripts.lazy), t.addHtmlClass("jsload"), setTimeout(function () { t.addHtmlClass("jsload2") }, 1000), clearInterval(t.lazyTrigger)) } addHtmlClass(t) { document.getElementsByTagName("html")[0].classList.add(t), window.w3Html.class += " " + t } registerScripts() { document.querySelectorAll("script[type=lazyJs]").forEach((t => { t.hasAttribute("src") ? t.hasAttribute("async") && !1 !== t.async ? this.w3Scripts.async.push(t) : t.hasAttribute("defer") && !1 !== t.defer || "module" === t.getAttribute("data-w3-type") ? this.w3Scripts.defer.push(t) : this.w3Scripts.normal.push(t) : this.w3Scripts.normal.push(t) })), document.querySelectorAll("script[type=lazyExJs]").forEach((t => { this.w3Scripts.lazy.push(t) })) } registerStyles() { document.querySelectorAll("link[data-href]").forEach((t => { this.w3Styles.push(t) })) } async executeScript(t) { return new Promise(((e, n) => { const i = document.createElement("script");[...t.attributes].forEach((t => { let e = t.nodeName; "type" !== e && ("data-w3-type" === e && (e = "type"), i.setAttribute(e, t.nodeValue)) })), t.hasAttribute("src") ? (i.onload = () => { e() }, i.onerror = () => { e() }) : (i.text = t.text, e()), null !== t.parentNode && t.parentNode.replaceChild(i, t) })) } async executeStyles(t) { return function (t) { t.href = t.getAttribute("data-href"), t.removeAttribute("data-href"), t.rel = "stylesheet" }(t) } async loadScripts(t) { const e = t.shift(); return e ? (await this.executeScript(e), this.loadScripts(t)) : Promise.resolve() } async loadStyles(t) { const e = t.shift(); return e ? (this.executeStyles(e), this.loadStyles(t)) : "loaded" } async loadFonts(t) { var e = document.createDocumentFragment(); t.forEach((t => { const n = document.createElement("link"); n.href = t, n.rel = "stylesheet", e.appendChild(n) })), document.head.appendChild(e) } preloadScripts(t) { var e = document.createDocumentFragment(), n = 0, i = this;[...t].forEach((s => { const o = s.getAttribute("src"), a = s.getAttribute("data-href"), r = s.getAttribute("data-w3-type"); if (o) { const t = document.createElement("link"); t.href = o, t.rel = "module" == r ? "modulepreload" : "preload", t.as = "script", e.appendChild(t) } else if (a) { const s = document.createElement("link"); s.href = a, s.rel = "preload", s.as = "style", n++, t.length == n && (s.dataset.last = 1), e.appendChild(s), s.onload = function () { fetch(this.href, { mode: "no-cors" }).then((t => t.blob())).then((t => { i.updateCssLoader() })).catch((t => { i.updateCssLoader() })) }, s.onerror = function () { i.updateCssLoader() } } })), document.head.appendChild(e) } updateCssLoader() { window.w3Html["data-css-loaded"] = window.w3Html["data-css-loaded"] + 1, window.w3Html["data-css"] == window.w3Html["data-css-loaded"] && (window.w3Html["css-preloaded"] = 1) } holdEventListeners() { let t = {}; function e(e, n) { !function (e) { function n(n) { return t[e].eventsToRewrite.indexOf(n) >= 0 ? "w3-" + n : n } t[e] || (t[e] = { originalFunctions: { add: e.addEventListener, remove: e.removeEventListener }, eventsToRewrite: [] }, e.addEventListener = function () { arguments[0] = n(arguments[0]), t[e].originalFunctions.add.apply(e, arguments) }, e.removeEventListener = function () { arguments[0] = n(arguments[0]), t[e].originalFunctions.remove.apply(e, arguments) }) }(e), t[e].eventsToRewrite.push(n) } function n(t, e) { let n = t[e]; Object.defineProperty(t, e, { get: () => n || function () { }, set(i) { t["w3" + e] = n = i } }) } e(document, "DOMContentLoaded"), e(window, "DOMContentLoaded"), e(window, "load"), e(window, "pageshow"), e(document, "readystatechange"), n(document, "onreadystatechange"), n(window, "onload"), n(window, "onpageshow") } bindFunc(t, e, n) { if (-1 == window.w3Html.class.indexOf("w3_js")) return setTimeout((function (t, e, n, i) { t.bindFunc(e, n, i) }), 50, this, t, e, n); t.bind(e)(n) } holdJquery(t) { let e = window.jQuery; Object.defineProperty(window, "jQuery", { get: () => e, set(n) { if (n && n.fn && !t.allJQueries.includes(n)) { n.fn.ready = n.fn.init.prototype.ready = function (e) { if (void 0 !== e) return t.scriptsLoadFired ? t.domReadyFired ? t.bindFunc(e, document, n) : document.addEventListener("w3-DOMContentLoaded", (() => t.bindFunc(e, document, n))) : document.addEventListener("DOMContentLoaded", (() => e.bind(document)(n))), n(document) }; const e = n.fn.on; n.fn.on = n.fn.init.prototype.on = function () { if ("ready" == arguments[0] || "w3-DOMContentLoad" == arguments[0]) { if (this[0] !== document) return e.apply(this, arguments), this; if ("string" != typeof arguments[1]) return t.bindFunc(arguments[1], document, n) } if (this[0] === window) { function i(t) { return t.split(" ").map((t => "load" === t || 0 === t.indexOf("load") ? "w3-jquery-load" : t)).join(" ") } "string" == typeof arguments[0] || arguments[0] instanceof String ? arguments[0] = i(arguments[0]) : "object" == typeof arguments[0] && Object.keys(arguments[0]).forEach((t => { Object.assign(arguments[0], { [i(t)]: arguments[0][t] })[t] })) } return e.apply(this, arguments), this }, t.allJQueries.push(n) } e = n } }) } async executeDomcontentloaded() { this.domReadyFired = !0, document.w3readyState = document.readyState, await this.repaintFrame(), document.dispatchEvent(new Event("w3-DOMContentLoaded")), await this.repaintFrame(), window.dispatchEvent(new Event("w3-DOMContentLoaded")), await this.repaintFrame(), document.dispatchEvent(new Event("w3-readystatechange")), await this.repaintFrame(), document.w3onreadystatechange && document.w3onreadystatechange() } async executeWindowLoad() { if (-1 == window.w3Html.class.indexOf("w3_js")) return setTimeout((function (t) { t.executeWindowLoad() }), 10, this); await this.repaintFrame(), setTimeout((function () { window.dispatchEvent(new Event("w3-load")) }), 100), await this.repaintFrame(), window.w3onload && window.w3onload(), await this.repaintFrame(), this.allJQueries.forEach((t => t(window).trigger("w3-jquery-load"))), window.dispatchEvent(new Event("w3-pageshow")), await this.repaintFrame(), window.w3onpageshow && window.w3onpageshow(w3pageshow) } exeDocumentWrite() { const t = new Map; document.write = document.writeln = function (e) { const n = document.currentScript, i = document.createRange(), s = n.parentElement; let o = t.get(n); void 0 === o && (o = n.nextSibling, t.set(n, o)); const a = document.createDocumentFragment(); i.setStart(a, 0), a.appendChild(i.createContextualFragment(e)), s.insertBefore(a, o) } } async repaintFrame() { return new Promise((t => requestAnimationFrame(t))) } static execute() { const t = new w3LoadScripts(["keydown", "mousemove", "touchmove", "touchstart", "touchend", "wheel", "click"]); t.userEventsAdd(t), document.w3readyState = "loading", t.holdJquery(t), (!t.w3LazyloadJs || window.scrollY > 50 || "complete" == document.readyState || "interactive" == document.readyState) && t.triggerListener(); const e = setInterval((function (t) { null != document.body && (document.body.getBoundingClientRect().top < -30 && t.triggerListener(), clearInterval(e)) }), 500, t) } w3Analytics() { document.querySelectorAll(".analytics").forEach(function (e) { trekkie.integrations = !1; var t = document.createElement("script"); t.innerHTML = e.innerHTML, e.parentNode.insertBefore(t, e.nextSibling), e.parentNode.removeChild(e) }) } w3Boomerang() { document.querySelectorAll(".boomerang").forEach(function (e) { window.BOOMR.version = !1; var t = document.createElement("script"); t.innerHTML = e.innerHTML, e.parentNode.insertBefore(t, e.nextSibling), e.parentNode.removeChild(e) }) } } w3LoadScripts.execute();
</script>
<script>
(() => {
    try {        
        const setAttribute = (element, attr, value) => element.setAttribute(attr, value);
        const removeAttribute = (element, attr) => element.removeAttribute(attr);        
        const observer = new MutationObserver((mutations) => {
            mutations.forEach(({ addedNodes }) => {
                addedNodes.forEach((node) => {
                    if (node.nodeType === 1) {
                        if (node.tagName === "SCRIPT" && node.id === 'web-pixels-manager-setup') {                        
                            node.type = "lazyJs";
                        } else if (node.tagName === "SCRIPT" && node.innerHTML.includes('propel-replays')) {                                                    
                            node.type = "lazyJs";
                        } else if (node.tagName === "SCRIPT" && node.innerHTML.includes('TriplePixelData')) {                                                    
                            node.type = "lazyJs";
                        } else if (node.tagName === "SCRIPT" && node.innerHTML.includes('adTraceTikTokPaused ')) {                                                    
                            node.type = "lazyJs";
                        } else if (node.tagName === "SCRIPT" && node.src.includes('tiktok-pixel')) {                                                    
                            node.type = "lazyJs";
                        } else if (node.tagName === "SCRIPT" && node.innerHTML.includes('bucksCC ')) {                                                    
                            node.type = "lazyJs";
                        } else if (node.tagName === "SCRIPT" && node.src.includes('assets/widgetLoader.js')) {                                                    
                            node.type = "lazyJs";
                        } 
                    }
                });
            });
            if (document.documentElement.classList.contains("w3_start")) {
                observer.disconnect();
            }
        });
        observer.observe(document.documentElement, {
            childList: true,
            subtree: true
        });
    } catch (error) {
        console.error("Error in MutationObserver:", error);
    }
})();
</script>